# -*- coding: utf-8 -*-
"""Project Cancer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w7n2OqgwMMCOz60kKVBlwI45GFEGG6lc

Importing the Dependencies
"""

import numpy as np
import pandas as pd
import random
import sys
from google.colab import drive

drive.mount('/content/drive')

data =pd.read_csv('/content/drive/MyDrive/Cancer Dataset/data.csv')

import sklearn.datasets

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Locate the File in Google Drive

"""

Path = ('drive/My Drive/Cancer Dataset')

"""Importing & Loading Dataset"""

df = pd.read_csv(Path+'/data.csv')

breast_cancer_dataset = sklearn.datasets.load_breast_cancer()

print(breast_cancer_dataset)

# Adding Columns & Feature Names in Dataset
df=pd.DataFrame(breast_cancer_dataset.data,columns = breast_cancer_dataset.feature_names)

df.head()

df.tail()

df['label']=pd.DataFrame(breast_cancer_dataset.target)

df.head()

df.tail()

# Print No. of Rows & Columns in Dataset
df.shape

# Getting Information about Dataset
df.info()

# Checking For Missing Values
df.isnull().sum()

# Statistical measures about the Dataset
df.describe()

"""1=Benign
2=Malingnant
"""

# Checking the distribution of Target variables in Dataset
df['label'].value_counts()

df.groupby('label').mean()

"""Seperating Features & Target"""

X = df.drop(columns='label',axis=1)
Y = df['label']

print (X)

print (Y)

"""Splliting the Data into Training Data & Testing Data"""

X_train, X_test, Y_train, Y_test=train_test_split(X,Y, test_size=0.2, random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training (Logistic Regression Model)"""

model = LogisticRegression()

# Training the Logistic Regression Model using Training Data
model.fit(X_train, Y_train)

"""Model Evaluation Accuracy Score"""

# Training Data Accuracy

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy on Training Data = ',training_data_accuracy)

# Test Data Accuracy

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy on Test Data = ',test_data_accuracy)

"""Building a Predictive System"""

input_data =(13.54,14.36,87.46,566.3,0.09779,0.08129,0.06664,0.04781,0.1885,0.05766,0.2699,0.7886,2.058,23.56,0.008462,0.0146,0.02387,0.01315,0.0198,0.0023,15.11,19.26,99.7,711.2,0.144,0.1773,0.239,0.1288,0.2977,0.07259)

# Change input data into a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshape the Numpy Array as we are predicting for one datapoint
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0] == 0):
  print('The Cancer is Malignant')
else:
  print('The Cancer is Banign')